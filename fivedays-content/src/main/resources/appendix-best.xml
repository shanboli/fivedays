<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter id="best">
  <title>Nexus Best Practices</title>

  <section id="best-sect-intro">
    <title>Introduction</title>

    <para><indexterm>
        <primary>best practices</primary>
      </indexterm>Once you decide to install a Repository Manager, the next
    decision is how to setup your repositories, particularly if you have
    multiple teams sharing the same instance. Nexus is very flexible in this
    area and supports a variety of configurations. I’ll first describe the
    options and then discuss the thought process used to decide what makes
    sense for your organization.</para>
  </section>

  <section>
    <title>Repositories per Project/Team</title>

    <para><indexterm>
        <primary>best practices</primary>

        <secondary>collaboration</secondary>
      </indexterm>The first and most obvious way to support multiple teams is
    to configure a pair of repositories per team (one release, one snapshot).
    The team is then given the appropriate C.R.U.D. permissions and they are
    able to use the system for their artifacts.</para>

    <para>Our http://oss.sonatype.org instance is for the most part configured
    in this manner, where each project like Jetty has their own repositories
    separate from everyone else.</para>
  </section>

  <section>
    <title>Partition Shared Repositories</title>

    <para><indexterm>
        <primary>best practices</primary>

        <secondary>partitioning</secondary>
      </indexterm>Another option is to have a single (or a few) pair of
    Release/Snapshot repositories for your entire organization. In this case,
    the access is controlled by a mechanism we call “Repository
    Targets.”</para>

    <para>Simply put, a Repository Target is a way to manage a set of
    artifacts based on their paths. A Repository Target is simply a list of
    regular expressions and a Name. For example, a Repo Target for Maven would
    be “./org/apache/maven/. and Nexus OSS would be
    “./org/sonatype/nexus/.“</para>

    <note>
      <para>while it is most common to manage artifacts based on the path of
      their groupId, the Regular Expression is matched against the entire
      path, and so it is also possible, for example, to define “Sources” as
      “.*-sources.jar” … it’s also worth noting that Repository Targets are
      not mutually exclusive. It is perfectly valid for a given path to be
      contained by multiple targets.</para>
    </note>

    <para>In this model, you would create a Repo Target for each project in
    your system. You are then able to take the Repo Target and associate it
    with one or more Repositories or Groups in your system. When you do this,
    new, specific, C.R.U.D. privileges are created. For example, I could take
    the Maven Repo target, associate it with my Release and Snapshot
    repository, and now I get privileges I can assign to Create, Read, Update,
    Delete “Maven” (./org/apache/maven/.) artifacts in my Release and Snapshot
    repositories.</para>

    <para>This method is used to manage the http://repository.apache.org
    instance, where we have just one Release and Snapshot repository and each
    project team gets permissions to their artifacts based on the path.</para>
  </section>

  <section>
    <title>Selecting an Approach</title>

    <para>First of all, these choices aren’t mutually exclusive. In fact, the
    first option builds upon the default Repository Target of “.*” which
    simply gives you access to all artifacts regardless of the path. You still
    associate the default Repo Target with specific repositories to create the
    assignable privileges</para>

    <para>In general, it’s my opinion that fewer repositories will scale
    better and are easier to manage. It’s also easier to start off with a
    single pair of repos, with the default “All M2″ (.*) target and simply
    refine the permissions as you scale. Most things that are configured per
    repository (Cache, Storage location, Snapshot purging, etc) will generally
    be applicable for all projects, so this mode avoids the duplication of
    these tasks. Since everything will be stored together in a single folder
    on disk, it makes backups easier as well.</para>

    <para>The reasons why you would want multiple sets of repositories is
    essentially the opposite of above: If you need different expiration,
    Snapshot purging or storage folders, then a single shared repo won’t work.
    Replication and failover strategies may also make this method easier to
    support. If you absolutely must maintain total separation between Project
    teams, ie they can’t read each other’s artifacts, then this solution might
    be more applicable as well. (but is still possible with Repo Targets…just
    grant Read to only the appropriate targets)</para>

    <para>In Summary, Nexus allows you to control the security of your
    artifacts based on the repository and/or the path of the artifact, meaning
    it is possible to slice and dice the system any way you see fit. My
    default position is to use a few Hosted Repositories as possible and
    control the permissions by the Repository Target.</para>
  </section>
</chapter>
